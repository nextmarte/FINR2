[
  {
    "objectID": "finance_with_R_2.html",
    "href": "finance_with_R_2.html",
    "title": "Finance with R Aula 2",
    "section": "",
    "text": "Inicialização\nIniciamos em um arquivo R Markdown e carregamos os pacotes.\n\n# Lista de pacotes\npackages &lt;- c(\"tidyverse\", \"highcharter\", \"quantmod\", \"PerformanceAnalytics\", \"scales\", \"timetk\",\"tidyquant\")\n\n# Instala pacotes que ainda não estão instalados\nnew_packages &lt;- packages[!(packages %in% installed.packages()[,\"Package\"])]\nif(length(new_packages)) install.packages(new_packages)\n\n# Carrega os pacotes\nlista&lt;-lapply(packages, require, character.only = TRUE)\n\n\n\nBibliografia:\nRegenstein Jr., Jonathan K.;Reproducible Finance with R, CRC press, 2019.\nPerlin, Marcelo S.; Processing and Anlyzing Financial Data with R, 2018. disponível em :https://www.msperlin.com/padfeR/\nPicerno, James; Quantitative investment Portfoilo Analytic in R,LLC, 2018.\n\n\nFinanças com R Aula 1 - Retornos dos ativos\n\n\nSumário\n\nIntrodução\nCálculo do Retorno do Portifólio\nVisualização dos Retornos do Portifólio\nIntrodução ao Shiny\n\n\n\n1. Introdução\nNa aula 1 fizemos a importação dos ativos e montamos o arquivo de classe xts, asset_returns_xts, direto do Yahoo.com, com o mesmo conjunto de ativos da aula anterior (vetor symbols).\n\nsymbols &lt;- c(\"SPY\",\"EFA\", \"IJS\", \"EEM\",\"AGG\")\nprices &lt;- \n  getSymbols(symbols, \n             src = 'yahoo', \n             from = \"2012-12-31\",\n             to = \"2017-12-31\",\n             auto.assign = TRUE, \n             warnings = FALSE,) %&gt;% \n  map(~Ad(get(.))) %&gt;% \n  reduce(merge) %&gt;%\n  `colnames&lt;-`(symbols)\n#to monthly prices\nprices_monthly&lt;-prices %&gt;% \n  to.monthly(indexAt = \"lastof\", OHLC = FALSE) \n\n#computing returns\nasset_monthly_returns_xts &lt;-\n  Return.calculate(prices_monthly, \n                   method = \"discrete\") %&gt;% \n   na.omit() \nhead(asset_monthly_returns_xts,3)\n\n                  SPY         EFA        IJS          EEM           AGG\n2013-01-31 0.05119037  0.03728468 0.05351637 -0.002930988 -0.0062117051\n2013-02-28 0.01275894 -0.01288593 0.01630662 -0.022840549  0.0059086279\n2013-03-31 0.03797070  0.01305414 0.04107953 -0.010182666  0.0009854878\n\n\n\n\n2. Cálculo do Retorno do Portifólio\nNosso objetivo será calcular e analisar o retorno de um conjunto de ativos.\nDenomina-se por carteira ou portfólio o conjunto de ativos mantidos por um agente. Este conjunto representará a totalidade dos ativos mantidos em suas diversas posições. Assim determinados ativos apresentarão posições compradas e outros vendidas. Como estes ativos representam a totalidade a soma dos pesos destes na carteira deverá ser 100%. Assim, o peso representado normalmente pelo anagrama em inglês de weight (w) será: \\[ w_i = \\frac{Valor\\,investido\\,no\\,ativo}{Total\\,da\\,carteira} = \\frac{V_i}{\\sum_{i=i}^n{V_i}} \\]\n\nExercício 1\nDeterminado agente possui uma carteira formada pelas seguintes posições: R$25000,00 no ativo A e R$50000,00 no ativo B.\n\nQuais os pesos de sua carteira?\nSe para a manutenção destas posições o agente tivesse emprestado R$40000,00 ao Banco X, qual seria a estrutura dos pesos de sua carteira?\n\nPortanto, será preciso incluir os pesos para cada ativo em nossos dados. Para este fim se criará o vetor w de pesos seguindo as percentagens estipuladas anteriormente (0.25,0,25,0.20,0.20,0.10). Atenção a soma dos pesos da carteira deverá ser sempre igual a 100%, ou seja 1.\n\nw&lt;-c(0.25,0.25,0.20,0.20,0.10)\n(sum(w))\n\n[1] 1\n\n\nO cálculo do retorno de uma carteira depende do retorno de cada ativo e de seu peso na carteira e pode ser obtido pela média ponderada:\n\\[ \\bar{k}=\\sum_{i=i}^n{w_i*k_i}\\] ### 2.1 Calculando o retorno no xts\nContinuando de onde paramos no ambiente xts asset_monthly_returns_xts quando calculamos os retornos mensais dos ativos:\n\nportfolio_returns_xts_rebalanced_monthly&lt;-Return.portfolio(asset_monthly_returns_xts,\n                 weights = w,\n                 rebalance_on = \"months\",\n                 type= \"discrete\") %&gt;% \n  `colnames&lt;-`(\"returns\")\nhead(portfolio_returns_xts_rebalanced_monthly,3)\n\n                 returns\n2013-01-31  0.0316146679\n2013-02-28 -0.0007476691\n2013-03-31  0.0190341328\n\n\n\n\n\n2.2 Cálculo do retorno do portifólio no Tidyverse\nEm seguida, transformamos o arquivo xts em data.frame.\n\n# convert the index to a date xts package\n asset_monthly_returns_long_tbl&lt;-\n  asset_monthly_returns_xts %&gt;%   \n  data.frame(date = index(.)) %&gt;%\n  # now remove the index because it got converted to row names\n  remove_rownames() %&gt;% \n  gather(asset, returns, -date)\n \nhead(asset_monthly_returns_long_tbl, 3)\n\n        date asset    returns\n1 2013-01-31   SPY 0.05119037\n2 2013-02-28   SPY 0.01275894\n3 2013-03-31   SPY 0.03797070\n\n\nDepois adicionamos a cada observação seu respectivo peso utilizando a função dplyr::case_when( ), digite no console: ?case_when e entenda sua operação.\n\n  asset_monthly_returns_long_with_weights_tbl&lt;-\n  asset_monthly_returns_long_tbl %&gt;% \n  group_by(asset) %&gt;% \n  na.omit() %&gt;% \n  mutate(weights = case_when(\n    asset==symbols[1] ~ w[1],\n    asset==symbols[2] ~ w[2],\n    asset==symbols[3] ~ w[3],\n    asset==symbols[4] ~ w[4],\n    asset==symbols[5] ~ w[5])) \n \nhead(asset_monthly_returns_long_with_weights_tbl, 4)\n\n# A tibble: 4 × 4\n# Groups:   asset [1]\n  date       asset returns weights\n  &lt;date&gt;     &lt;chr&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1 2013-01-31 SPY    0.0512    0.25\n2 2013-02-28 SPY    0.0128    0.25\n3 2013-03-31 SPY    0.0380    0.25\n4 2013-04-30 SPY    0.0192    0.25\n\n\n\nportifolio_monthly_returns_dplyr_byhand&lt;-\n  asset_monthly_returns_long_with_weights_tbl %&gt;% \n    mutate(weighted_returns = returns*weights) %&gt;% \n  group_by(date) %&gt;% \n  summarise(returns = sum(weighted_returns))\nhead(portifolio_monthly_returns_dplyr_byhand, 4)\n\n# A tibble: 4 × 2\n  date         returns\n  &lt;date&gt;         &lt;dbl&gt;\n1 2013-01-31  0.0316  \n2 2013-02-28 -0.000748\n3 2013-03-31  0.0190  \n4 2013-04-30  0.0210  \n\n\n\n\nExercício 3\nObtenha a partir do arquivo prices um arquivo organizado da forma longa de log retornos diários dos ativos na classe tibble sendo que as colunas devem ser denominadas date asset e returns e denomine o arquivo de: assets_daily_returns_long.\n\n#computing returns departing from prices \nassets_daily_returns_long &lt;-\n  Return.calculate(prices, \n                   method = \"log\") %&gt;% \n   na.omit()  %&gt;%   \n  data.frame(date = index(.)) %&gt;%\n  # now remove the index because it got converted to row names\n  remove_rownames() %&gt;% \n  gather(asset, returns, -date)\nhead(assets_daily_returns_long,3)\n\n        date asset      returns\n1 2013-01-02   SPY  0.025307188\n2 2013-01-03   SPY -0.002262197\n3 2013-01-04   SPY  0.004382400\n\n\n\n\nExercício 4\nComo obteria os retornos mensais no ambiente tidyverse a partir dos log-retornos diários?\n\n\n2.2 Cálculo do retorno da carteira no Tidyquant\nNo ambiente tidyquant partiremos do arquivo asset_monthly_returns_long_tbl  obtido quando convertemos o arquivo xts para tibble.\n\n# using tibbletime\nportfolio_tq_rebalanced_monthly&lt;-\n  asset_monthly_returns_long_tbl %&gt;% \n  tq_portfolio(assets_col = asset,\n               returns_col = returns,\n               weights = w,\n               col_rename = \"returns\",\n               rebalance_on = \"days\")\nhead(portfolio_tq_rebalanced_monthly)\n\n# A tibble: 6 × 2\n  date         returns\n  &lt;date&gt;         &lt;dbl&gt;\n1 2013-01-31  0.0316  \n2 2013-02-28 -0.000748\n3 2013-03-31  0.0190  \n4 2013-04-30  0.0210  \n5 2013-05-31 -0.00473 \n6 2013-06-30 -0.0225  \n\n\nContudo poderíamos ter realizado toda a tarefa no tidyquant. A função tidyquant::tq_get() é uma função consolidada que obtém dados de várias fontes da web. A função é uma wrapper para várias funções quantmod, funções Quandl e também obtém dados de websources indisponível em outros pacotes. Os resultados são sempre retornados como um tibble.\nAs vantagens são:\n\nApenas uma função é necessária para todas as fontes de dados.\nA função pode ser usada sem os verbos tidyverse: purrr, tidyr e dplyr.\n\nA função tidyquant::tq_get_options () retorna uma lista de opções de obtenção válidas que você pode escolher.\n\ntq_daily_prices&lt;- symbols %&gt;% \n    tq_get(get  = \"stock.prices\",\n          from = \"2012-12-31\",\n          to   = \"2017-12-31\") %&gt;%\ngroup_by(symbol) \nhead(tq_daily_prices,4)\n\n# A tibble: 4 × 8\n# Groups:   symbol [1]\n  symbol date        open  high   low close    volume adjusted\n  &lt;chr&gt;  &lt;date&gt;     &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;\n1 SPY    2012-12-31  140.  143.  140.  142. 243935200     116.\n2 SPY    2013-01-02  145.  146.  145.  146. 192059000     119.\n3 SPY    2013-01-03  146.  146.  145.  146. 144761800     119.\n4 SPY    2013-01-04  146.  147.  146.  146. 116817700     119.\n\n\nDesejamos trabalhar somente com os retornos mensais dos preços ajustados,\n\ntq_monthly_returns&lt;-tq_daily_prices %&gt;% \n  tq_transmute(select     = adjusted, \n             mutate_fun = periodReturn, \n             period     = \"monthly\", \n             col_rename = \"returns\")  \nhead(tq_monthly_returns, 4) # go spread and slice(-1)\n\n# A tibble: 4 × 3\n# Groups:   symbol [1]\n  symbol date       returns\n  &lt;chr&gt;  &lt;date&gt;       &lt;dbl&gt;\n1 SPY    2012-12-31  0     \n2 SPY    2013-01-31  0.0512\n3 SPY    2013-02-28  0.0128\n4 SPY    2013-03-28  0.0380\n\ntq_monthly_returns_wide&lt;-tq_monthly_returns %&gt;% spread(key = symbol, value = returns) %&gt;% slice(-1)\nhead(tq_monthly_returns_wide,3)\n\n# A tibble: 3 × 6\n  date             AGG      EEM     EFA    IJS    SPY\n  &lt;date&gt;         &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt;\n1 2013-01-31 -0.00621  -0.00293  0.0373 0.0535 0.0512\n2 2013-02-28  0.00591  -0.0228  -0.0129 0.0163 0.0128\n3 2013-03-28  0.000986 -0.0102   0.0131 0.0411 0.0380\n\n\nObserve o primeiro registro para 2012-12-31, o que conclui?\nAgora falta combinar os ativos no portifólio.\n\nportfolio_tq_rebalanced_monthly&lt;-\n  tq_monthly_returns %&gt;% \n  tq_portfolio(assets_col = symbol,\n               returns_col = returns,\n               weights = w,\n               col_rename = \"returns\",\n               rebalance_on = \"months\") %&gt;% \n              slice(-1)\nhead(portfolio_tq_rebalanced_monthly)\n\n# A tibble: 6 × 2\n  date         returns\n  &lt;date&gt;         &lt;dbl&gt;\n1 2013-01-31  0.0316  \n2 2013-02-28 -0.000748\n3 2013-03-28  0.0190  \n4 2013-04-30  0.0210  \n5 2013-05-31 -0.00473 \n6 2013-06-28 -0.0225  \n\n\n\n\n3. Visualização dos Retornos do Portifólio\nIniciaremos pelo ambiente xts utilizando o pacote highcharter\n\nhc_ativos&lt;-highchart(type = \"stock\") %&gt;% \n  hc_title(text = \"Monthly Log Returns\") %&gt;%\n  hc_add_series(asset_monthly_returns_xts$SPY, \n                  name = names(asset_monthly_returns_xts$SPY)) %&gt;%\n  hc_add_series(asset_monthly_returns_xts$EFA, \n                  name = names(asset_monthly_returns_xts$EFA)) %&gt;%\n  hc_add_series(asset_monthly_returns_xts$IJS, \n                  name = names(asset_monthly_returns_xts$IJS)) %&gt;%\n  \n  hc_add_theme(hc_theme_flat()) %&gt;%\n  hc_navigator(enabled = FALSE) %&gt;% \n  hc_scrollbar(enabled = FALSE)\nhc_ativos\n\n\n\n\n\n\n\nVisualizando o retorno do portifólio.\n\nspy&lt;-asset_monthly_returns_xts$SPY\nhead(spy)\n\n                   SPY\n2013-01-31  0.05119037\n2013-02-28  0.01275894\n2013-03-31  0.03797070\n2013-04-30  0.01921268\n2013-05-31  0.02360922\n2013-06-30 -0.01334411\n\nhc1&lt;-highchart(type = \"stock\") %&gt;% \n  hc_title(text = \"Monthly Returns SPY x Portfolio\") %&gt;%\n  hc_add_series(\n    portfolio_returns_xts_rebalanced_monthly$returns, \n                name =  \"portifolio\", \n                color= \"darkblue\") %&gt;%\n hc_add_series(\n    spy, \n                name =  names(spy), \n                color= \"red\") %&gt;%\n  hc_add_theme(hc_theme_flat()) %&gt;%\n  hc_navigator(enabled = FALSE) %&gt;% \n  hc_scrollbar(enabled = FALSE) %&gt;% \n  hc_legend(enabled = TRUE) %&gt;% \n  hc_exporting(enabled = TRUE)\nhc1\n\n\n\n\n\nAgora um histograma dos retornos do portfólio\n\nhc2&lt;-hist(portifolio_monthly_returns_dplyr_byhand$returns,\n          breaks = 50,\n          plot = FALSE)\n\nhchart(hc2, color= \"red\",\n     name= \"Returns\") %&gt;% \n  hc_title(text = \"Portifolio Monthly Returns\")%&gt;%\n  hc_add_theme(hc_theme_flat()) %&gt;%\n  hc_exporting(enabled = TRUE)\n\n\n\n\n\n\n\nvisualizando retornos no tidyverse\nIniciaremos com um gráfico de dispersão o trabalho com ggplot()\n\nportifolio_monthly_returns_dplyr_byhand %&gt;% \n  ggplot( aes( x=date, y=returns))+\n  geom_point(color=\"darkblue\")+\n  xlab(\"date\")+\n  ylab(\"monthly returns\")+\n  theme_update(plot.title = element_text (hjust = 0.5))+\n  ggtitle( \"Portfolio Returns Scatter\")+\n  scale_x_date(breaks = pretty_breaks(n = 6))\n\n\n\n\n\n\n\n\nAgora vamos obter um histograma com os retornos todos nossos ativos e do portfolio.\n\nq&lt;-portfolio_tq_rebalanced_monthly %&gt;% slice(-1) %&gt;% \n  ggplot(aes(x= returns))+\n  geom_histogram(binwidth = 0.01,\n                 fill = \"darkblue\",\n                 color = \"white\")\n q1&lt;- q+ ggtitle(\"Portfolio Returns Distribution\")+\n  theme_update(plot.title = element_text (hjust = 0.5))\n q1\n\n\n\n\n\n\n\n\n\n\nExercício 5\n\nColoque num único gráfico utilizando ggplot2::geom_histogram() o histograma de todos os ativos e do portfolio utilize alpha = 0.20 para os ativos.\nAdicione ao gráfico anterior a densidade do retorno do portifólio em preto."
  }
]